/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "Integra DTR-60.6 Feedback Processor v1.0"
// #HINT ""
#DEFINE_CONSTANT	ciKEYBACK		11
#DEFINE_CONSTANT	ciKEYCLEAR		12
#DEFINE_CONSTANT	ciKEYENTER		13

#DEFINE_CONSTANT	ciPASSLEN		4

#DEFINE_CONSTANT	ciFM			1

#DEFINE_CONSTANT	csSLEEP				"!1SLP"
#DEFINE_CONSTANT	csTUNER				"!1TUN"
#DEFINE_CONSTANT	csTUNERZONE			"!1TUZ"
#DEFINE_CONSTANT	csTUNER3			"!1TU3"
#DEFINE_CONSTANT	csTUNER4			"!1TU4"
#DEFINE_CONSTANT	csVOLUME			"!1MVL"
#DEFINE_CONSTANT	csVOLUMEZONE		"!1ZVL"
#DEFINE_CONSTANT	csVOLUME3			"!1VL3"
#DEFINE_CONSTANT	csVOLUME4			"!1VL4"
#DEFINE_CONSTANT	csNETLINEASCII		"!1NLSA"
#DEFINE_CONSTANT	csNETLINEUNICODE	"!1NLSU"
#DEFINE_CONSTANT	csNETLINECURSOR		"!1NLSC"
#DEFINE_CONSTANT	csNATARTIST			"!1NAT"
#DEFINE_CONSTANT	csNATALBUM			"!1NAL"
#DEFINE_CONSTANT	csNATTITLE			"!1NTI"
#DEFINE_CONSTANT	csNATTIME			"!1NTM"
#DEFINE_CONSTANT	csNATTRACK			"!1NTR"
#DEFINE_CONSTANT	csNATSTATUS			"!1NST"

// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
// #ENABLE_TRACE

#HELP_BEGIN
	For use inside the Integra DTR-60.6 v1.0 module only.
#HELP_END
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Net_FF_Rew_Pushed; 
ANALOG_INPUT	Tuner_Band_In;
BUFFER_INPUT	From_Device$[10000];

ANALOG_OUTPUT	Sleep_Time, Main_Volume_In, Zone_2_Volume_In, Zone_3_Volume_In,
				Zone_4_Volume_In;
STRING_OUTPUT	Tuner_Frequency$, Tuner_Zone_Frequency$, Tuner_Zone_3_Frequency$,
				Tuner_Zone_4_Frequency$, NAT_Artist$, NAT_Album$, NAT_Title$,
				NAT_Time$, NAT_Play$, NAT_Repeat$, NAT_Shuffle$, NAT_Track$,
				To_Device$;
DIGITAL_OUTPUT	Net_Cursor_Position_Line[10];
STRING_OUTPUT	Net_Line_Text[10];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iTemp, iSleep, iFlag1, a, iVol, iVol2, iVol3, iVol4, iTemp1,
		iCursorPosition, iTemp2, iTemp3, iNetDelay, iSemaphore;
STRING	sTemp[100], sTemp1[100], sTuner[24], sTunerZone[24], sTuner4[24],
		sTuner3[24], sLineText[10][64], sNATArtist[64],
		sNATAlbum[64], sNATTitle[64], sNATTime[64], sNATPlay[1], sNATRepeat[1],
		sNATShuffle[1], sNATTrack[64];
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
RELEASE Net_FF_Rew_Pushed
{
	wait(500, wNetDelay)
	{
		iNetDelay = 0;
		NAT_Play$ = sNATPlay;
	}
}

PUSH Net_FF_Rew_Pushed
{
	cancelwait(wNetDelay);
	iNetDelay = 1;
}

CHANGE From_Device$
{
	if(iSemaphore = 0)
	{
		iSemaphore = 1;
		while(1)
		{
			sTemp = gather("\x1A", From_Device$);
			if(len(sTemp))
			{
				if(find(csSLEEP, sTemp) > 0)
				{
					iTemp1 = find(csSLEEP, sTemp);
					sTemp1 = mid(sTemp, len(csSLEEP) + iTemp1, 2);
					iTemp = hextoi(sTemp1);
					if(iTemp <> iSleep)
					{
						iSleep = iTemp;
						Sleep_Time = iSleep;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csVOLUME, sTemp) > 0)
				{
					iTemp1 = find(csVOLUME, sTemp);
					sTemp1 = mid(sTemp, len(csVOLUME) + iTemp1, 2);
					iTemp = hextoi(sTemp1);
					if(iTemp <> iVol)
					{
						iVol = iTemp;
						Main_Volume_In = iVol;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csVOLUMEZONE, sTemp) > 0)
				{
					iTemp1 = find(csVOLUMEZONE, sTemp);
					sTemp1 = mid(sTemp, len(csVOLUMEZONE) + iTemp1, 2);
					iTemp = hextoi(sTemp1);
					if(iTemp <> iVol2)
					{
						iVol2 = iTemp;
						Zone_2_Volume_In = iVol2;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csVOLUME3, sTemp) > 0)
				{
					iTemp1 = find(csVOLUME3, sTemp);
					sTemp1 = mid(sTemp, len(csVOLUME3) + iTemp1, 2);
					iTemp = hextoi(sTemp1);
					if(iTemp <> iVol3)
					{
						iVol3 = iTemp;
						Zone_3_Volume_In = iVol3;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csVOLUME4, sTemp) > 0)
				{
					iTemp1 = find(csVOLUME4, sTemp);
					sTemp1 = mid(sTemp, len(csVOLUME4) + iTemp1, 2);
					iTemp = hextoi(sTemp1);
					if(iTemp <> iVol4)
					{
						iVol4 = iTemp;
						Zone_4_Volume_In = iVol4;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csTUNER, sTemp) > 0)
				{
					iTemp1 = find(csTUNER, sTemp);
					sTemp1 = mid(sTemp, len(csTUNER) + iTemp1, len(sTemp) - len(CSTUNER) - iTemp1);
					if(sTuner <> sTemp1)
					{
						makestring(sTuner, "%d", atoi(sTemp1));
						if(Tuner_Band_In = ciFM)
						{
							makestring(Tuner_Frequency$, "%s.%s MHz", left(sTuner, len(sTuner) - 2), right(sTuner, 2));
						}
						else
						{
							makestring(Tuner_Frequency$, "%s kHz", sTuner);
						}
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csTUNERZONE, sTemp) > 0)
				{
					iTemp1 = find(csTUNERZONE, sTemp);
					sTemp1 = mid(sTemp, len(csTUNERZONE) + iTemp1, len(sTemp) - len(csTUNERZONE) - iTemp1);
					if(sTunerZone <> sTemp1)
					{
						makestring(sTunerZone, "%d", atoi(sTemp1));
						if(Tuner_Band_In = ciFM)
						{
							makestring(Tuner_Zone_Frequency$, "%s.%s MHz", left(sTunerZone, len(sTunerZone) - 2), right(sTunerZone, 2));
						}
						else
						{
							makestring(Tuner_Zone_Frequency$, "%s kHz", sTunerZone);
						}
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csTUNER3, sTemp) > 0)
				{
					iTemp1 = find(csTUNER3, sTemp);
					sTemp1 = mid(sTemp, len(csTUNER3) + iTemp1, len(sTemp) - len(csTUNER3) - iTemp1);
					if(sTuner3 <> sTemp1)
					{
						makestring(sTuner3, "%d", atoi(sTemp1));
						if(Tuner_Band_In = ciFM)
						{
							makestring(Tuner_Zone_3_Frequency$, "%s.%s MHz", left(sTuner3, len(sTuner3) - 2), right(sTuner3, 2));
						}
						else
						{
							makestring(Tuner_Zone_3_Frequency$, "%s kHz", sTuner3);
						}
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csTUNER4, sTemp) > 0)
				{
					iTemp1 = find(csTUNER4, sTemp);
					sTemp1 = mid(sTemp, len(csTUNER4) + iTemp1, len(sTemp) - len(csTUNER4) - iTemp1);
					if(sTuner3 <> sTemp1)
					{
						makestring(sTuner4, "%d", atoi(sTemp1));
						if(Tuner_Band_In = ciFM)
						{
							makestring(Tuner_Zone_4_Frequency$, "%s.%s MHz", left(sTuner4, len(sTuner4) - 2), right(sTuner4, 2));
						}
						else
						{
							makestring(Tuner_Zone_4_Frequency$, "%s kHz", sTuner4);
						}
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNETLINEASCII, sTemp) > 0)
				{
					iTemp1 = find(csNETLINEASCII, sTemp);
					iTemp2 = atoi(mid(sTemp, iTemp1 + 2, 5)) + 1;
					iTemp3 = find("\x1A", sTemp);
					sTemp1 = mid(sTemp, 9, iTemp3 - 9);
					if(sLineText[iTemp2] <> sTemp1)
					{
						sLineText[iTemp2] = sTemp1;
						Net_Line_Text[iTemp2] = sLineText[iTemp2];
					}
				}
				else if(find(csNETLINEUNICODE, sTemp) > 0)
				{
					iTemp1 = find(csNETLINEUNICODE, sTemp);
					iTemp2 = atoi(mid(sTemp, iTemp1 + 2, 8)) + 1;
					iTemp3 = find("\x1A", sTemp);
					sTemp1 = mid(sTemp, 9, iTemp3 - 9);
					if(sLineText[iTemp2] <> sTemp1)
					{
						sLineText[iTemp2] = sTemp1;
						Net_Line_Text[iTemp2] = sLineText[iTemp2];
					}
				}
				else if(find(csNETLINECURSOR, sTemp) > 0)
				{
					iTemp1 = find(csNETLINECURSOR, sTemp);
					iTemp2 = atoi(mid(sTemp, iTemp1 + 2, 8)) + 1;
					if(mid(sTemp, 7, 1) = "-")
					{
						iTemp2 = 0;
					}
					if(iCursorPosition <> iTemp2)
					{
						iCursorPosition = iTemp2;
						for(a = 1 to 10)
						{
							Net_Cursor_Position_Line[a] = 0;
						}
						if(iCursorPosition > 0)
						{
							Net_Cursor_Position_Line[iCursorPosition] = 1;
						}
					}
					if(find("P", mid(sTemp, 8, 1)) > 0)
					{
						for(a = 1 to 10)
						{
							sLineText[a] = "";
							Net_Line_Text[a] = sLineText[a];
						}
					}
				}
				else if(find(csNATARTIST, sTemp) > 0)
				{
					iTemp1 = find(csNATARTIST, sTemp);
					sTemp1 = mid(sTemp, len(csNATARTIST) + iTemp1, len(sTemp) - len(csNATARTIST) - iTemp1);
					if(sNATArtist <> sTemp1)
					{
						sNATArtist = sTemp1;
						NAT_Artist$ = sNATArtist;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNATALBUM, sTemp) > 0)
				{
					iTemp1 = find(csNATALBUM, sTemp);
					sTemp1 = mid(sTemp, len(csNATALBUM) + iTemp1, len(sTemp) - len(csNATALBUM) - iTemp1);
					if(sNATAlbum <> sTemp1)
					{
						sNATAlbum = sTemp1;
						NAT_Album$ = sNATAlbum;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNATTITLE, sTemp) > 0)
				{
					iTemp1 = find(csNATTITLE, sTemp);
					sTemp1 = mid(sTemp, len(csNATTITLE) + iTemp1, len(sTemp) - len(csNATTITLE) - iTemp1);
					if(sNATTitle <> sTemp1)
					{
						sNATTitle = sTemp1;
						NAT_Title$ = sNATTitle;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNATTIME, sTemp) > 0)
				{
					iTemp1 = find(csNATTIME, sTemp);
					sTemp1 = mid(sTemp, len(csNATTIME) + iTemp1, len(sTemp) - len(csNATTIME) - iTemp1);
					if(sNATTime <> sTemp1)
					{
						sNATTime = sTemp1;
						NAT_Time$ = sNATTime;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNATTRACK, sTemp) > 0)
				{
					iTemp1 = find(csNATTRACK, sTemp);
					sTemp1 = mid(sTemp, len(csNATTRACK) + iTemp1, len(sTemp) - len(csNATTRACK) - iTemp1);
					if(sNATTrack <> sTemp1)
					{
						sNATTrack = sTemp1;
						NAT_Track$ = sNATTrack;
					}
					sTemp1 = "";
					sTemp = "";
				}
				else if(find(csNATSTATUS, sTemp) > 0)
				{
					iTemp1 = find(csNATARTIST, sTemp);
					sTemp1 = chr(byte(sTemp, 6));
					if(sNATPlay <> sTemp1)
					{
						if((sTemp1 = "P") && (iNetDelay <> 1))
						{
							sNATPlay = sTemp1;
							NAT_Play$ = sNATPlay;
						}
						else if((sTemp1 = "P") && (iNetDelay = 1))
						{
							sNATPlay = sTemp1;
						}
						else
						{
							sNATPlay = sTemp1;
							NAT_Play$ = sNATPlay;
						}
					}
					sTemp1 = chr(byte(sTemp, 7));
					if(sNATRepeat <> sTemp1)
					{
						sNATRepeat = sTemp1;
						NAT_Repeat$ = sNATRepeat;
					}
					sTemp1 = chr(byte(sTemp, 8));
					if(sNATShuffle <> sTemp1)
					{
						sNATShuffle = sTemp1;
						NAT_Shuffle$ = sNATShuffle;
					}
					sTemp1 = "";
					sTemp = "";
				}
			}
		}
		iSemaphore = 0;
	}
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	iFlag1 = 0;
	sTemp = "";
	sTemp1 = "";
	iTemp = 100;
	iNetDelay = 0;
	iSemaphore = 0;
}
