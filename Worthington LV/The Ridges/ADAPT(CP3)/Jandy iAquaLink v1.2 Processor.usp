/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics, Inc.
System Name: Jandy iAqualink
System Number:
Programmer: LP
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Jandy iAquaLink v1.2 Processor"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with the Jandy iAquaLink v1.2.umc module only.
Not to be used as a stand-alone module
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
//#CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
// #INCLUDEPATH ""
#USER_SIMPLSHARP_LIBRARY "Jandy_iAquaLink_v1_2"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Get_Session;
DIGITAL_INPUT Kill_Session;
DIGITAL_INPUT Refresh_List;
DIGITAL_INPUT Get_Home;
DIGITAL_INPUT Set_Pool_Pump;
DIGITAL_INPUT Set_Pool_Heater;
DIGITAL_INPUT Set_Spa_Pump;
DIGITAL_INPUT Set_Spa_Heater;
DIGITAL_INPUT Set_Solar_Heater;
DIGITAL_INPUT Set_SWC_Boost;
DIGITAL_INPUT Set_SWC_Low;
DIGITAL_INPUT Get_OneTouch;
DIGITAL_INPUT Get_Devices;
DIGITAL_INPUT Temp_1_Enter;
DIGITAL_INPUT Temp_2_Enter;
ANALOG_INPUT Temp_1_Setting;
ANALOG_INPUT Temp_2_Setting;
ANALOG_INPUT Dimmer_Setting;
DIGITAL_INPUT Dimmer_Enter;
ANALOG_INPUT SJVA_Setting;
DIGITAL_INPUT SJVA_Enter;
DIGITAL_INPUT Set_OneTouch[6];
DIGITAL_INPUT Select_Device[10];
DIGITAL_INPUT Select_Aux[32];
DIGITAL_INPUT Select_Color[15];
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_; 
ANALOG_INPUT Dimmer_Value_Request;
DIGITAL_INPUT Select_SJVA[5];
DIGITAL_INPUT Select_Aux_Lights[32];



// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT Receive_Text[5000]; 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT

STRING_OUTPUT Location_Text;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT Home_Status_Text; 
STRING_OUTPUT Home_SystemType_Text;
STRING_OUTPUT Home_TempScale_Text;
STRING_OUTPUT Home_SpaTemp_Text;
STRING_OUTPUT Home_PoolTemp_Text;
STRING_OUTPUT Home_AirTemp_Text;
STRING_OUTPUT Home_SpaSetPoint_Text;
ANALOG_OUTPUT Home_SpaSetPoint_Value;
STRING_OUTPUT Home_PoolSetPoint_Text;
ANALOG_OUTPUT Home_PoolSetPoint_Value;
STRING_OUTPUT Home_CoverPool_Text;
DIGITAL_OUTPUT Cover_Pool_Available;
STRING_OUTPUT Home_FreezeProtection_Text;
DIGITAL_OUTPUT Freeze_Protection_Available;
ANALOG_OUTPUT Home_SpaPump_Status;
ANALOG_OUTPUT Home_PoolPump_Status;
ANALOG_OUTPUT Home_SpaHeater_Status;
ANALOG_OUTPUT Home_PoolHeater_Status;
ANALOG_OUTPUT Home_SolarHeater_Status;
DIGITAL_OUTPUT Solar_Heater_Available;
STRING_OUTPUT Home_SWCSetPoint_Text;
DIGITAL_OUTPUT SWC_Setpoint_Available;
ANALOG_OUTPUT Home_SWCBoost_Status;
DIGITAL_OUTPUT SWC_Boost_Available;
ANALOG_OUTPUT Home_SWCLow_Status;
DIGITAL_OUTPUT SWC_Low_Available;
DIGITAL_OUTPUT Session_ID_Received;
STRING_OUTPUT Home_ACLValue_Text;
DIGITAL_OUTPUT ACL_Value_Available;
STRING_OUTPUT Home_SpaSalinity_Text;
DIGITAL_OUTPUT Spa_Salinity_Available;
STRING_OUTPUT Home_PoolSalinity_Text;
DIGITAL_OUTPUT Pool_Salinity_Available;
STRING_OUTPUT Home_ORP_Text;
DIGITAL_OUTPUT ORP_Available;
STRING_OUTPUT Home_PH_Text;
DIGITAL_OUTPUT PH_Available;
STRING_OUTPUT Message_Text;
STRING_OUTPUT Wait_Message_Text;
DIGITAL_OUTPUT Message_Sub_Pulse;
DIGITAL_OUTPUT Wait_Message_Sub_Pulse;
DIGITAL_OUTPUT Select_Set_Dimmer_Screen;
DIGITAL_OUTPUT Select_Set_Light_Screen;
DIGITAL_OUTPUT Select_Set_SJVA_Screen;
STRING_OUTPUT Dimmer_Setting_Text;
ANALOG_OUTPUT Dimmer_Setting_Value;
STRING_OUTPUT Lighting_Setting_Text;
STRING_OUTPUT SJVA_Setting_Text;
ANALOG_OUTPUT SJVA_Setting_Value;
DIGITAL_OUTPUT Session_Ended_Pulse;
DIGITAL_OUTPUT One_Device;
DIGITAL_OUTPUT Multiple_Devices;
DIGITAL_OUTPUT Not_Connected;
STRING_OUTPUT Device_Serial_Number_Display[10];
STRING_OUTPUT Device_Label[10];
STRING_OUTPUT Device_OneTouch[10];
DIGITAL_OUTPUT One_Touch_Status[6];
DIGITAL_OUTPUT One_Touch_State[6];
STRING_OUTPUT One_Touch_Label[6];
ANALOG_OUTPUT Aux_State[32];
STRING_OUTPUT Aux_Label_Text[32];
STRING_OUTPUT Aux_Type_Text[32];
STRING_OUTPUT Aux_Subtype_Text[32];
STRING_OUTPUT Aux_Lights_Text[15];
DIGITAL_OUTPUT Device_Enable[10];



/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER Email_Address[30];
STRING_PARAMETER Password[30];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/
Jandy UserClass;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iAuxType[32];
INTEGER iAuxSubType[32];
INTEGER iAuxSelected;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING sReceiveText[5000];
INTEGER iSessionID;


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function RegDelegates()
{
	RegisterDelegate(UserClass, SendMessage, ProcessSendMessage);
	RegisterDelegate(UserClass, SendWaitMessage, ProcessSendWaitMessage);
	RegisterDelegate(UserClass, SendGetSessionInfo, ProcessGetSessionInfo);
	RegisterDelegate(UserClass, SendGetHomeInfo1, ProcessGetHomeInfo1);
	RegisterDelegate(UserClass, SendGetHomeInfo2, ProcessGetHomeInfo2);
	RegisterDelegate(UserClass, SendGetHomeInfo3, ProcessGetHomeInfo3);
	RegisterDelegate(UserClass, SendGetOneTouchInfo, ProcessGetOneTouchInfo);
	RegisterDelegate(UserClass, SendAuxLightNames, ProcessGetAuxLightNames);
	RegisterDelegate(UserClass, SendGetDevicesScreenInfo, ProcessGetDevicesScreenInfo);
	RegisterDelegate(UserClass, SendLocation, ProcessLocation);
	RegisterDelegate(UserClass, SendEndSession, ProcessSendEndSession); 
	RegisterDelegate(UserClass, SendNumberDevices, ProcessSendNumberDevices);
	RegisterDelegate(UserClass, SendNoConnection, ProcessNoConnection);
}

Callback Function ProcessGetSessionInfo(integer iIndex, string sSerialNumberDisplay, string sLabel, string sOneTouch)
{
	if(len(sSerialNumberDisplay))
		Device_Enable[iIndex + 1] = 1;
	else
		Device_Enable[iIndex + 1] = 0;
	Device_Serial_Number_Display[iIndex + 1] = sSerialNumberDisplay;
	Device_Label[iIndex + 1] = sLabel;
	Device_OneTouch[iIndex + 1] = sOneTouch;
	iSessionID = 1;
}

Callback Function ProcessSendEndSession()
{
	Session_Ended_Pulse = 1;
	Session_Ended_Pulse = 0;
	iSessionID = 0;
}


Callback Function ProcessGetHomeInfo1(string sString1, string sString2, string sString3, string sString4, string sString5, string sString6, string sString7, string sString8)
{
// trace("From Simpl#, Home Screen Info Group 1:%s\n", sString1);
	Home_Status_Text = sString1; 
	switch(atoi(sString2))
	{
		case(0):
			Home_SystemType_Text = "Pool/Spa Combo";
		case(1):
			Home_SystemType_Text = "Pool/Spa Only";
		case(2):
			Home_SystemType_Text = "Dual";
	}
	Home_TempScale_Text = sString3;
	Home_SpaTemp_Text = sString4;
	Home_PoolTemp_Text = sString5;
	Home_AirTemp_Text = sString6;
	Home_SpaSetPoint_Text = sString7;
	Home_SpaSetPoint_Value = atoi(sString7);
	Home_PoolSetPoint_Text = sString8;
	Home_PoolSetPoint_Value = atoi(sString8);

	processlogic();
}

Callback Function ProcessGetHomeInfo2(string sString1, string sString2, string sString3, string sString4, string sString5, string sString6, string sString7, string sString8)
{
// 	trace("From Simpl#, Home Screen Info Group 2\n");
	Home_CoverPool_Text = sString1;
	if(len(sString1))	
		Cover_Pool_Available = 1;
	else
		Cover_Pool_Available = 0;

	Home_FreezeProtection_Text = sString2;
	if(len(sString2))
		Freeze_Protection_Available = 1;
	else
		Freeze_Protection_Available = 0;
	
	Home_SpaPump_Status = atoi(sString3);
	Home_PoolPump_Status = atoi(sString4);
	Home_SpaHeater_Status = atoi(sString5);
	Home_PoolHeater_Status = atoi(sString6);

	Home_SolarHeater_Status = atoi(sString7);
	if(len(sString7))
		Solar_Heater_Available = 1;
	else
		Solar_Heater_Available = 0;

	Home_SWCSetPoint_Text = sString8;
    if(len(sString8))
    	SWC_Setpoint_Available = 1;
	else
    	SWC_Setpoint_Available = 0;

	processlogic();
}

Callback Function ProcessGetHomeInfo3(string sString1, string sString2, string sString3, string sString4, string sString5, string sString6, string sString7, string sString8)
{
// 	trace("From Simpl#, Home Screen Info Group 3\n");
	Home_SWCBoost_Status = atoi(sString1);
	if(len(sString1))
		SWC_Boost_Available = 1;
	else
		SWC_Boost_Available = 0;
	

	Home_SWCLow_Status = atoi(sString2);
	if(len(sString2))
		SWC_Low_Available = 1;
	else
		SWC_Low_Available = 0;
	

	Home_ACLValue_Text = sString3;
	if(len(sString3))
		ACL_Value_Available = 1;
	else
		ACL_Value_Available = 0;
	
	Home_SpaSalinity_Text = sString4;
    if(len(sString4))
		Spa_Salinity_Available = 1;
	else
		Spa_Salinity_Available = 0;

	Home_PoolSalinity_Text = sString5;
	if(len(sString5))
		Pool_Salinity_Available = 1;
	else
		Pool_Salinity_Available = 0;

	Home_ORP_Text = sString6;
	if(len(sString6))
		ORP_Available = 1;
	else
		ORP_Available = 0;

	Home_PH_Text = sString7;
	if(len(sString7))
		PH_Available = 1;
	else
		PH_Available = 0;

	processlogic();
}


Callback Function ProcessGetOneTouchInfo(integer iIndex, string sStatus, string sState, string sLabel)
{
	One_Touch_Status[iIndex + 1] = atoi(sStatus);
	One_Touch_State[iIndex + 1] = atoi(sState);
	One_Touch_Label[iIndex + 1] = sLabel;
}

Callback Function ProcessGetDevicesScreenInfo(integer iIndex, string sState, string sLabel, string sIcon, string sType, string sSubtype)
{
	Aux_State[iIndex + 1] = atoi(sState);
	Aux_Label_Text[iIndex + 1] = sLabel;
	iAuxType[iIndex + 1] = atoi(sType);
	iAuxSubType[iIndex + 1] = atoi(sSubtype);


	switch(iAuxType[iIndex + 1])
	{
		case(0):
		{
			Aux_Type_Text[iIndex + 1] = "Toggle";
			Aux_Subtype_Text[iIndex + 1] = "";
		}
		case(1):
		{
			Aux_Type_Text[iIndex + 1] = "Dimmer";
			Aux_Subtype_Text[iIndex + 1] = itoa(iAuxSubType[iIndex + 1]) + "%";
		}
		case(2):
		{
			Aux_Type_Text[iIndex + 1] = "Color";
			switch(iAuxSubType[iIndex + 1])
			{	
				case(1):
					Aux_Subtype_Text[iIndex + 1] = "Jandy";
				case(2):
					Aux_Subtype_Text[iIndex + 1] = "Pentair";
				case(3):
					Aux_Subtype_Text[iIndex + 1] = "Hayward";
				case(4):
					Aux_Subtype_Text[iIndex + 1] = "Jandy LED";
				case(5):
					Aux_Subtype_Text[iIndex + 1] = "Pentair";
			}
		}
		case(3):
		{
			Aux_Type_Text[iIndex + 1] = "SJVA";
			Aux_Subtype_Text[iIndex + 1] = itoa(iAuxSubType[iIndex + 1]) + "%";
		}
		default:
		{
			Aux_Type_Text[iIndex + 1] = "";
			Aux_Subtype_Text[iIndex + 1] = "";
		}
	}

	if((iIndex + 1) = iAuxSelected)
	{
		switch(iAuxType[iIndex + 1])
		{
			case(1):
			{
				Dimmer_Setting_Text = itoa(iAuxSubType[iIndex + 1]);
				Dimmer_Setting_Value = iAuxSubType[iIndex + 1];
			}
			case(3):
			{			
				SJVA_Setting_Text = itoa(iAuxSubType[iIndex + 1]);
				SJVA_Setting_Value = iAuxSubType[iIndex + 1];
			}
		}
	}
}

Callback Function ProcessGetAuxLightNames(integer iIndex, string sColor)
{
	Aux_Lights_Text[iIndex + 1] = sColor;
	processlogic();
}

Callback Function ProcessSendMessage(string sMessage)
{
// 	trace("From Simpl#, Message\n");
	Message_Text = sMessage;
	Message_Sub_Pulse = 1;
	Message_Sub_Pulse = 0;
}

Callback Function ProcessSendWaitMessage(string sMessage)
{
// 	trace("From Simpl#, Wait Message\n");			
	Wait_Message_Text = sMessage;
	Wait_Message_Sub_Pulse = 1;
	Wait_Message_Sub_Pulse = 0;
}

Callback Function ProcessLocation(string sLocation)
{
// 	trace("From Simpl#, Location\n");			
	Location_Text = sLocation;
}

Callback Function ProcessSendNumberDevices(integer iNumberDevices)
{
	if(iNumberDevices = 1)
	{
		Multiple_Devices = 0;
		One_Device = 1;
	}
	else
	{
		One_Device = 0;
		Multiple_Devices = 1;
	}
	processlogic();
}

Callback Function ProcessNoConnection(integer iStatus)
{
// 	trace("From Simpl#, Wait Message\n");
	if(iStatus = 1)
		Not_Connected = 1;
	else
		Not_Connected = 0;
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/


PUSH Refresh_List
{
	UserClass.Get_Session(Email_Address, Password);
}

PUSH Get_Session
{
	if(iSessionID = 0)
	    UserClass.Get_Session(Email_Address, Password);
	else
	    UserClass.Get_Home();
}

PUSH Kill_Session
{
    UserClass.Kill_Session();
}

PUSH Get_Home
{	if(iSessionID = 0)
	    UserClass.Get_Session(Email_Address, Password);
    UserClass.Get_Home();
//    UserClass.Get_Devices();
}

PUSH Set_Pool_Pump
{
    UserClass.Set_Pool_Pump();
}

PUSH Set_Pool_Heater
{
    UserClass.Set_Pool_Heater();
}

PUSH Set_Spa_Pump
{
    UserClass.Set_Spa_Pump();
}

PUSH Set_Spa_Heater
{
    UserClass.Set_Spa_Heater();
}

PUSH Set_Solar_Heater
{
    UserClass.Set_Solar_Heater();
}

PUSH Set_SWC_Boost
{
    UserClass.Set_SWC_Boost();
}

PUSH Set_SWC_Low
{
    UserClass.Set_SWC_Low();
}

PUSH Get_OneTouch
{
    UserClass.Get_OneTouch();
}

PUSH Set_OneTouch
{
    UserClass.Set_OneTouch(getlastmodifiedarrayindex());
}

PUSH Get_Devices
{
    UserClass.Get_Devices();
}

PUSH Select_Aux
{
	INTEGER iCurrentAuxType;
	
    iAuxSelected = getlastmodifiedarrayindex();
	UserClass.Aux_Selected(iAuxSelected);

	iCurrentAuxType = iAuxType[iAuxSelected];

	if(iCurrentAuxType = 0)									//	if normal toggle aux device
	    UserClass.Set_Aux(iAuxSelected);					//	send set_aux_x command

	else if(iCurrentAuxType = 1)							//	if light dimmer aux device
	{
		Select_Set_Dimmer_Screen = 1;						//	display set dimmer screen
		Select_Set_Dimmer_Screen = 0;
		Dimmer_Setting_Text = itoa(iAuxSubType[iAuxSelected]);
    }

	else if(iCurrentAuxType = 2)							//	if color light aux device
	{
	    UserClass.Select_Aux_Lights(iAuxSelected);
		Select_Set_Light_Screen = 1;						//	display set light screen
		Select_Set_Light_Screen = 0;
		switch(iAuxSubType[iAuxSelected])
        {
			case(1):
				Lighting_Setting_Text = "Jandy";
			case(2):
				Lighting_Setting_Text = "Pentair";
			case(3):
				Lighting_Setting_Text = "Hayward";
			case(4):
				Lighting_Setting_Text = "Jandy LED";
			case(5):
				Lighting_Setting_Text = "Pentair";
     	}
    }

	else if(iCurrentAuxType = 3)							//	if sjva aux device
	{
		Select_Set_SJVA_Screen = 1;							//	display set sjva screen
		Select_Set_SJVA_Screen = 0;
		SJVA_Setting_Text = itoa(iAuxSubType[iAuxSelected]);	
    }
}

THREADSAFE CHANGE Receive_Text
{
	INTEGER iCountCurlyStart;
	INTEGER iCountCurlyEnd;
	STRING sResponse[5000];
	INTEGER a;

	sReceiveText = sReceiveText + Receive_Text;
	iCountCurlyStart = 0;
	iCountCurlyEnd = 0;

	clearbuffer(sResponse);


	for(a = 1 to len(sReceiveText))
	{
		if(byte(sReceiveText, a) = 0x7B)		// if find opening curly bracket
			iCountCurlyStart = iCountCurlyStart + 1;
		else if(byte(sReceiveText, a) = 0x7D)	// if find closing curly bracket
		{
			iCountCurlyEnd = iCountCurlyEnd + 1;
			if(iCountCurlyEnd = iCountCurlyEnd)		// if equal amount of brackets
			{
				sResponse = removebylength(a, sReceiveText);
				break;
			}
		}
	}
		
	if(len(sResponse))
		print("sResponse:%s\n", sResponse);
	else
		print("sResponse:none\n");
}

PUSH Select_Device
{
    UserClass.Select_Device(getlastmodifiedarrayindex());
}

PUSH Select_Color
{
    UserClass.Select_Color(getlastmodifiedarrayindex());
}

PUSH Select_Aux_Lights
{
    UserClass.Select_Aux_Lights(getlastmodifiedarrayindex());
}

CHANGE Temp_1_Setting
{
	Home_SpaSetPoint_Text = itoa(Temp_1_Setting);
}
  
CHANGE Temp_2_Setting
{
	Home_PoolSetPoint_Text = itoa(Temp_2_Setting);
}

PUSH Temp_1_Enter
{
	UserClass.Set_Temp_1(Temp_1_Setting);
}

PUSH Temp_2_Enter
{
	UserClass.Set_Temp_2(Temp_2_Setting);
}

CHANGE Dimmer_Setting
{
	Dimmer_Setting_Text = itoa(Dimmer_Setting);
}

PUSH Dimmer_Enter
{
	UserClass.Set_Dimmer(Dimmer_Setting);
}

CHANGE SJVA_Setting
{
	SJVA_Setting_Text = itoa(SJVA_Setting);
}

PUSH SJVA_Enter
{
	UserClass.Set_SJVA(SJVA_Setting);
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	clearbuffer(sReceiveText);
	RegDelegates();
//	UserClass.Set_Debug(Debug);
	iSessionID = 0;
	One_Device = 0;
	Multiple_Devices = 1;
	Not_Connected = 0;

}


