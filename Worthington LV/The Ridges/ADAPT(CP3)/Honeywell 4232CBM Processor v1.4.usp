/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Honeywell 4232CBM Processor v1.4"
// #HINT ""
#DEFINE_CONSTANT	ciSENDDELAY		100
#DEFINE_CONSTANT	ciRECEIVEDELAY	3000
#DEFINE_CONSTANT	ciMAXKEYS		20
#DEFINE_CONSTANT	ciMAXKEYPRESSES	5
#DEFINE_CONSTANT	ciINITCOUNT		4

#DEFINE_CONSTANT	ciHEX100		0x100
#DEFINE_CONSTANT	ciFIRSTBITMASK	0x7F

#DEFINE_CONSTANT	Residential			1
#DEFINE_CONSTANT	Commercial			2
#DEFINE_CONSTANT	DefaultEcpAddress	"\x19"
#DEFINE_CONSTANT	CommercialEcpAddress1	5
#DEFINE_CONSTANT	CommercialEcpAddress2	6
#DEFINE_CONSTANT	ResidentialEcpAddress1	1
#DEFINE_CONSTANT	ResidentialEcpAddress2	17
#DEFINE_CONSTANT	PacketFlagsCAL		"\x40"
#DEFINE_CONSTANT	PacketFlagsStandard	"\x00"

#DEFINE_CONSTANT	ciL1BYTE		13
#DEFINE_CONSTANT	ciL2BYTE		14
#DEFINE_CONSTANT	ciL3BYTE		15
#DEFINE_CONSTANT	ciBACKLIGHTBYTE	19
#DEFINE_CONSTANT	ciBACKLIGHTBIT	7

#DEFINE_CONSTANT	ciLINE1TEXTBYTE1	19
#DEFINE_CONSTANT	ciLINE2TEXTBYTE1	35
#DEFINE_CONSTANT	ciLINENUMBYTES		16

#DEFINE_CONSTANT	ciKEY0			1
#DEFINE_CONSTANT	ciKEY1			2
#DEFINE_CONSTANT	ciKEY2			3
#DEFINE_CONSTANT	ciKEY3			4
#DEFINE_CONSTANT	ciKEY4			5
#DEFINE_CONSTANT	ciKEY5			6
#DEFINE_CONSTANT	ciKEY6			7
#DEFINE_CONSTANT	ciKEY7			8
#DEFINE_CONSTANT	ciKEY8			9
#DEFINE_CONSTANT	ciKEY9			10
#DEFINE_CONSTANT	ciKEYSTAR		11
#DEFINE_CONSTANT	ciKEYHASH		12
#DEFINE_CONSTANT	ciKEYSTAR1		13
#DEFINE_CONSTANT	ciKEYSTARHASH	14
#DEFINE_CONSTANT	ciKEYHASH3		15
#DEFINE_CONSTANT	ciKEY13			16
#DEFINE_CONSTANT	ciKEYC			17
#DEFINE_CONSTANT	ciKEYD			18
#DEFINE_CONSTANT	ciKEYE			19
#DEFINE_CONSTANT	ciKEYF			20

#DEFINE_CONSTANT	csKEY0			"\x00"
#DEFINE_CONSTANT	csKEY1			"\x01"
#DEFINE_CONSTANT	csKEY2			"\x02"
#DEFINE_CONSTANT	csKEY3			"\x03"
#DEFINE_CONSTANT	csKEY4			"\x04"
#DEFINE_CONSTANT	csKEY5			"\x05"
#DEFINE_CONSTANT	csKEY6			"\x06"
#DEFINE_CONSTANT	csKEY7			"\x07"
#DEFINE_CONSTANT	csKEY8			"\x08"
#DEFINE_CONSTANT	csKEY9			"\x09"
#DEFINE_CONSTANT	csKEYSTAR		"\x0A"
#DEFINE_CONSTANT	csKEYHASH		"\x0B"
#DEFINE_CONSTANT	csKEYSTAR1		"\x0C"
#DEFINE_CONSTANT	csKEYSTARHASH	"\x0D"
#DEFINE_CONSTANT	csKEYHASH3		"\x0E"
#DEFINE_CONSTANT	csKEY13			"\x0F"
#DEFINE_CONSTANT	csKEYC			"\x1C"
#DEFINE_CONSTANT	csKEYD			"\x1D"
#DEFINE_CONSTANT	csKEYE			"\x1E"
#DEFINE_CONSTANT	csKEYF			"\x1F"

#DEFINE_CONSTANT	csCOMMANDWORD	"\xFF\x12"
#DEFINE_CONSTANT	csESPADDRESS1	"\x05"
#DEFINE_CONSTANT	csESPADDRESS2	"\x05"
//#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
#HELP_BEGIN
	For use inside the Honeywell 4232CBM v1.4 module only.
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	Initialize, enable_debugging, Key[ciMAXKEYS];
ANALOG_INPUT	System_Type;
BUFFER_INPUT	From_Device[1000];

DIGITAL_OUTPUT	Back_Light_On, Receiving_Data;
ANALOG_OUTPUT	L1_Value, L2_Value, L3_Value;
STRING_OUTPUT	Line_1_Text, Line_2_Text, To_Device;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iKey, iInitSent, iBackLight, iJunk, iLength, iCheckSum, a, systemType, initCommandsCount;
STRING	sKeypresses[ciMAXKEYPRESSES], sESPCommand[25], sCommand[100], sInitCommand[4][25],
		sTemp[250], sAddress[2],
		sLine1Text[ciLINENUMBYTES], sTempLine1Text[ciLINENUMBYTES],
		sLine2Text[ciLINENUMBYTES], sTempLine2Text[ciLINENUMBYTES];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fReceivingTimeOut()
{
	wait(ciRECEIVEDELAY, wReceivingDataTimeOut)
	{
		Receiving_Data = 0;
	}
}

Function fSendCommand()
{
	INTEGER fiA, fiCheckSum, fiLen;
	
	if(len(sKeyPresses) > 0)
	{
		sCommand = "";
		sESPCommand = sAddress + chr(len(sKeyPresses) + 1) + sKeyPresses;
		fiCheckSum = 0;
		for(fiA = 1 to len(sESPCommand))
		{
			fiCheckSum = fiCheckSum + byte(sESPCommand, fiA);
			if(enable_debugging)
			{
				generateusernotice("fSendCommand: calculating check sum: fiCheckSum = %d; sESPCommand byte[%d] = %d", fiCheckSum, fiA, byte(sESPCommand, fiA));
			}
		}
		if(fiCheckSum > ciHEX100)
		{
			fiCheckSum = fiCheckSum mod ciHEX100;
			if(enable_debugging)
			{
				generateusernotice("fSendCommand: check sum mod 256: fiCheckSum = %d;", fiCheckSum);
			}
		}
		fiCheckSum = 0x100 - fiCheckSum;
		if(enable_debugging)
		{
			generateusernotice("fSendCommand: 256 - check sum: fiCheckSum = %d;", fiCheckSum);
		}
		sESPCommand = csCOMMANDWORD + "\xF6" + mid(sAddress, 1, 1) + sESPCommand + chr(fiCheckSum);
		fiLen = len(sESPCommand);
		if(enable_debugging)
		{
			generateusernotice("fSendCommand: fiLen = %d;", fiLen);
		}
		sCommand = "\x00" + chr(fiLen / ciHEX100) + chr(fiLen mod ciHEX100) + sESPCommand;
		fiCheckSum = 0;
		for(fiA = 1 to len(sCommand))
		{
			fiCheckSum = fiCheckSum + byte(sCommand, fiA);
			if(enable_debugging)
			{
				generateusernotice("fSendCommand: sCommand byte[%d] = %d;", fiA, byte(sCommand, fiA));
				generateusernotice("fSendCommand: calculating check sum #2: fiCheckSum = %d;", fiCheckSum);
			}
		}
		sCommand = "\x02" + sCommand + chr(fiCheckSum mod ciHEX100);
		sKeyPresses = "";
		sESPCommand = "";
		if(enable_debugging)
		{
			for(fiA = 1 to len(sCommand))
			{
				generateusernotice("fSendCommand: sCommand byte[%d] = %d;", fiA, byte(sCommand, fiA));
			}
		}
		To_Device = sCommand;
	}
}

Function fSendDelay()
{
	wait(ciSENDDELAY, wSendDelay)
	{
		if(len(sKeyPresses) > 0)
		{
			fSendCommand();
		}
	}
}

Function fInitDelay()
{
	if(iInitSent < initCommandsCount)
	{
		iInitSent = iInitSent + 1;
		To_Device = sInitCommand[iInitSent];
		wait(250, wInitDelay)
		{
			fInitDelay();
		}
	}
}

Function fProcessResponse(STRING fsTemp)
{
	STRING fsTempCommand[3];
	
	fsTempCommand = mid(fsTemp, 5, 3);
	switch(1)
	{
		case(fsTempCommand = "\xFF\x12\xF7"):	//Keypad Text
		{
			L1_Value = byte(fsTemp, ciL1BYTE);
			L2_Value = byte(fsTemp, ciL2BYTE);
			L3_Value = byte(fsTemp, ciL3BYTE);
			iBacklight = bit(fsTemp, ciBACKLIGHTBYTE, ciBACKLIGHTBIT);
			Back_Light_On = iBackLight;
			sTempLine1Text = mid(fsTemp, ciLINE1TEXTBYTE1, ciLINENUMBYTES);
			sTempLine2Text = mid(fsTemp, ciLINE2TEXTBYTE1, ciLINENUMBYTES);
			sTempLine1Text = chr(byte(sTempLine1Text, 1) & ciFIRSTBITMASK) + right(sTempLine1Text, len(sTempLine1Text) - 1);
			if(sTempLine1Text <> sLine1Text)
			{
				sLine1Text = sTempLine1Text;
				sTempLine1Text = "";
				Line_1_Text = sLine1Text;
			}
			if(sTempLine2Text <> sLine2Text)
			{
				sLine2Text = sTempLine2Text;
				sTempLine2Text = "";
				Line_2_Text = sLine2Text;
			}
		}
	}
}

Function setSystemType()
{
	integer options, checkSum, a;
	string sTempCommand[100];
	options = 0;
	if(System_Type = Commercial)
	{
		systemType = Commercial;
		sAddress = chr(CommercialEcpAddress1);
		//set the first Init command FF10
		sESPCommand = "\xFF\x10\x01\x00\x00" + DefaultEcpAddress + "\x00";
		//Calculate Checksums here
		sTempCommand = packetFlagsStandard + chr(len(sESPCommand) / 256) + chr(len(sESPCommand) mod 256) + sESPCommand;
		checkSum = 0;
		for(a = 1 to len(sTempCommand))
		{
			checkSum = checkSum + byte(sTempCommand, a);
			if(enable_debugging)
			{
				generateusernotice("System_Type: Commercial: checksum = %d; sTempCommand byte[%d] = %d;", checksum, a, byte(sTempCommand, a));
			}
		}
		sInitCommand[1] = "\x02" + sTempCommand + chr(checkSum mod ciHEX100);
		sESPCommand = "";
		sTempCommand = "";
		Options = 0x0080 | 0x0040;
		Options = Options | (CommercialEcpAddress1 & 0x001F);
		sESPCommand = "\xFF\x11\x02" + chr(Options);
		Options = 0x0080;
		Options = Options | (CommercialEcpAddress2 & 0x001F);
		sESPCommand = sESPCommand + chr(Options);
		//Calculate Checksums here
		sTempCommand = packetFlagsStandard + chr(len(sESPCommand) / 256) + chr(len(sESPCommand) mod 256) + sESPCommand;
		checkSum = 0;
		for(a = 1 to len(sTempCommand))
		{
			checkSum = checkSum + byte(sTempCommand, a);
			if(enable_debugging)
			{
				generateusernotice("System_Type: Commercial: second checksum: checksum = %d; sTempCommand byte[%d] = %d;", checksum, a, byte(sTempCommand, a));
			}
		}
		sInitCommand[2] = "\x02" + sTempCommand + chr(checkSum mod ciHEX100);
		initCommandsCount = 2;
	}
	else
	{
		systemType = Residential;
		sAddress = chr(ResidentialEcpAddress1);
		sESPCommand = "\xFF\x10\x01\x00\x00" + DefaultEcpAddress + "\x00";
		//Calculate Checksums here
		sTempCommand = packetFlagsStandard + chr(len(sESPCommand) / 256) + chr(len(sESPCommand) mod 256) + sESPCommand;
		checkSum = 0;
		for(a = 1 to len(sTempCommand))
		{
			checkSum = checkSum + byte(sTempCommand, a);
			if(enable_debugging)
			{
				generateusernotice("System_Type: Residential: checksum = %d; sTempCommand byte[%d] = %d;", checksum, a, byte(sTempCommand, a));
			}
		}
		sInitCommand[1] = "\x02" + sTempCommand + chr(checkSum mod ciHEX100);
		sESPCommand = "";
		sTempCommand = "";
		Options = 0x0080 | 0x0040;
		Options = Options | (ResidentialEcpAddress1 & 0x001F);
		sESPCommand = "\xFF\x11\x02" + chr(Options);
		Options = 0x0080;
		Options = Options | (ResidentialEcpAddress2 & 0x001F);
		sESPCommand = sESPCommand + chr(Options);
		//Calculate Checksums here
		sTempCommand = packetFlagsStandard + chr(len(sESPCommand) / 256) + chr(len(sESPCommand) mod 256) + sESPCommand;
		checkSum = 0;
		for(a = 1 to len(sTempCommand))
		{
			checkSum = checkSum + byte(sTempCommand, a);
			if(enable_debugging)
			{
				generateusernotice("System_Type: Residential: second checksum: checksum = %d; sTempCommand byte[%d] = %d;", checksum, a, byte(sTempCommand, a));
			}
		}
		sInitCommand[2] = "\x02" + sTempCommand + chr(checkSum mod ciHEX100);
		sESPCommand = "";
		sTempCommand = "";
		sESPCommand = "\xFF\x12\xF6\x01\xA1\x09\x00\x6D\x6B\x0E\x45\x43\xF5\x31\xCB";
		//Calculate Checksums here
		sTempCommand = packetFlagsCAL + chr(len(sESPCommand) / 256) + chr(len(sESPCommand) mod 256) + sESPCommand;
		checkSum = 0;
		for(a = 1 to len(sTempCommand))
		{
			checkSum = checkSum + byte(sTempCommand, a);
			if(enable_debugging)
			{
				generateusernotice("System_Type: Residential: third checksum: checksum = %d; sTempCommand byte[%d] = %d;", checksum, a, byte(sTempCommand, a));
			}
		}
		sInitCommand[3] = "\x02" + sTempCommand + chr(checkSum mod ciHEX100);
		initCommandsCount = 3;
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Initialize
{
	if(len(sInitCommand[1]) = 0)
	{
		setSystemType();
	}
	iInitSent = 0;
	fInitDelay();
	Receiving_Data = 1;
	fReceivingTimeOut();
}

PUSH Key
{
	iKey = getlastmodifiedarrayindex();
	cancelwait(wSendDelay);
	if(len(sKeyPresses) < ciMAXKEYPRESSES)
	{
		switch(iKey)
		{
			case(ciKEY0):
			{
				sKeyPresses = sKeyPresses + csKEY0;
			}
			case(ciKEY1):
			{
				sKeyPresses = sKeyPresses + csKEY1;
			}
			case(ciKEY2):
			{
				sKeyPresses = sKeyPresses + csKEY2;
			}
			case(ciKEY3):
			{
				sKeyPresses = sKeyPresses + csKEY3;
			}
			case(ciKEY4):
			{
				sKeyPresses = sKeyPresses + csKEY4;
			}
			case(ciKEY5):
			{
				sKeyPresses = sKeyPresses + csKEY5;
			}
			case(ciKEY6):
			{
				sKeyPresses = sKeyPresses + csKEY6;
			}
			case(ciKEY7):
			{
				sKeyPresses = sKeyPresses + csKEY7;
			}
			case(ciKEY8):
			{
				sKeyPresses = sKeyPresses + csKEY8;
			}
			case(ciKEY9):
			{
				sKeyPresses = sKeyPresses + csKEY9;
			}
			case(ciKEY0):
			{
				sKeyPresses = sKeyPresses + csKEY0;
			}
			case(ciKEYSTAR):
			{
				sKeyPresses = sKeyPresses + csKEYSTAR;
			}
			case(ciKEYHASH):
			{
				sKeyPresses = sKeyPresses + csKEYHASH;
			}
			case(ciKEYSTAR1):
			{
				sKeyPresses = sKeyPresses + csKEYSTAR1;
			}
			case(ciKEYSTARHASH):
			{
				sKeyPresses = sKeyPresses + csKEYSTARHASH;
			}
			case(ciKEYHASH3):
			{
				sKeyPresses = sKeyPresses + csKEYHASH3;
			}
			case(ciKEY13):
			{
				sKeyPresses = sKeyPresses + csKEY13;
			}
			case(ciKEYC):
			{
				sKeyPresses = sKeyPresses + csKEYC;
			}
			case(ciKEYD):
			{
				sKeyPresses = sKeyPresses + csKEYD;
			}
			case(ciKEYE):
			{
				sKeyPresses = sKeyPresses + csKEYE;
			}
			case(ciKEYF):
			{
				sKeyPresses = sKeyPresses + csKEYF;
			}
		}
		fSendDelay();
	}
	if(len(sKeyPresses) >= ciMAXKEYPRESSES)
	{
		cancelwait(wSendDelay);
		fSendCommand();
	}
}

Change System_Type
{
	setSystemType();
}

THREADSAFE Change From_Device
{
	while(len(From_Device) > 0)
	{
		cancelwait(wReceivingDataTimeOut);
		Receiving_Data = 1;
		while((len(From_Device) > 0) && (byte(From_Device, 1) <> 0x02))
		{
			iJunk = getc(From_Device);
		}
		if(len(From_Device) > 3)
		{
			iLength = byte(From_Device, 3) * ciHEX100 + byte(From_Device, 4);
			if(len(From_Device) >= (iLength + 5))
			{
				sTemp = removebylength(iLength + 5, From_Device);
				iCheckSum = 0;
				for(a = 1 to iLength + 3)
				{
					iCheckSum = iCheckSum + byte(sTemp, a + 1);
				}
				if(low(iCheckSum) = byte(sTemp, len(sTemp)))
				{
					fProcessResponse(sTemp);
				}
				else
				{
					sTemp = "";
				}
			}
		}
	}
	fReceivingTimeOut();
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	WaitForInitializationComplete();
	iBackLight = 0;
	Back_Light_On = iBackLight;
	iLength = 0;
	iCheckSum = 0;
	Receiving_Data = 0;
	setarray(sInitCommand, "");
	sAddress = chr(ResidentialEcpAddress1);
	systemType = Residential;
}
